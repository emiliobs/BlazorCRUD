@page "/indice-personas"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.IO
@using CsvHelper


<h3>Personas</h3>
<AuthorizeView>
    <Authorized>
        <div>
            <a class="btn btn-success" href="crear-persona">Nueva Persona</a>
        </div>
    </Authorized>
</AuthorizeView>

@if (Personas == null)
{
    <text>Cargando......</text>
}
else if (Personas.Length == 0)
{
    <text>No Hay Personas en la base de datos.</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th></th>


            </tr>
        </thead>
        <tbody>
            @foreach (var persona in Personas)
            {
                <tr>
                    <td>
                        @persona.Id
                    </td>
                    <td>
                        @persona.Name
                    </td>

                    <td>
                        <AuthorizeView>
                            <Authorized>
                        <a class="btn btn-success" href="editar-persona/@persona.Id">Editar</a> |
                        <button class="btn btn-danger" @onclick="@(() =>  BorrarPersona(persona.Id))">Borrar</button>

                            </Authorized>
                        </AuthorizeView>
                    </td>

                </tr>
            }
        </tbody>
    </table>

    <hr />
    <button @onclick="@ExportarCSV">Exportar CSV.</button>
    <button @onclick="@ExportarExcel">Exportar EXCEL.</button>
}

@code {

    Persona[] Personas { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarPersonas();
    }

    private void ExportarExcel()
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Personas");

            var tableBody = worksheet.Cells["A1:A1"].LoadFromCollection( from p in Personas select new { p.Id, p.Name }, true);

            var header = worksheet.Cells["A1:B1"];
            worksheet.DefaultColWidth = 25;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(Color.WhiteSmoke);
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Medium);
            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(Color.White);
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);

            JS.GuardarComo("personas.xlsx", package.GetAsByteArray());
        }
    }

    private void ExportarCSV()
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {
                using (var csv = new CsvWriter(writer))
                {
                    csv.WriteRecords(Personas);
                }

                var arr = memoryStream.ToArray();

                JS.GuardarComo("personas.csv", arr);
            }
        }
    }

    async Task CargarPersonas()
    {
        Personas = await Http.GetJsonAsync<Persona[]>("Personas");

        //Personas = new Persona[]
        //{
        //    new Persona{ Id = 1, Name = "Emilio Barrera" },
        //    new Persona{ Id = 2, Name = "Carla Miranda" },
        //    new Persona{ Id = 3, Name = "Chalsy Hermosa" },
        //};
    }

    async Task BorrarPersona(int idPersona)
    {
        //await JS.MostrarMensaje("Titulo","Este es un mensaje de prueba", IJSExtensions.TipoMensajeSweetAlert.success);
        var personaSeleccionada = Personas.First(p => p.Id == idPersona);
        string mensajeConfirmacion = $"¿Deseas borrar a la persona {personaSeleccionada.Name}?";

        if (await JS.Confirm("Confirmar", mensajeConfirmacion, IJSExtensions.TipoMensajeSweetAlert.question))
        {
            await Http.DeleteAsync($"Personas/{idPersona}");

            await CargarPersonas();
        }


    }
}
